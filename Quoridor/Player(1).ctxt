#BlueJ class context
comment0.params=row\ col\ goal\ paint
comment0.target=Player(int,\ int,\ int,\ java.lang.String)
comment0.text=\r\n\ Constructor\ for\ Player\ -\ initialize\ row,\ col\ and\ goal.\r\n
comment1.params=row\ col\ goal\ paint
comment1.target=Player\ resetPlayer(int,\ int,\ int,\ java.lang.String)
comment1.text=\r\n\ resetPlayer\ -\ intializes\ the\ player\r\n
comment10.params=action
comment10.target=void\ tryMove(Coord)
comment10.text=\r\n\ tryMove\ -\ try\ a\ move\ without\ committing\r\n
comment11.params=player
comment11.target=Coord\ play(Player)
comment11.text=\r\n\ play\ -\ this\ function\ gets\ called\ to\ play\ a\ move\r\n
comment12.params=row\ col
comment12.target=void\ placePiece(int,\ int)
comment12.text=\r\n\ placeOnBoard\ -\ places\ piece\ on\ board\r\n
comment13.params=oldRow\ oldCol\ newRow\ newCol\ opponent\ blocking
comment13.target=boolean\ isPathClear(int,\ int,\ int,\ int,\ Player,\ boolean)
comment13.text=\r\n\ isPathClear\ -\ checks\ to\ see\ if\ path\ is\ clear\r\n
comment14.params=row\ col\ orient\ opponent
comment14.target=boolean\ checkForWalls(int,\ int,\ int,\ Player)
comment14.text=\r\n\ checkForWalls\ -\ checks\ to\ see\ if\ walls\ are\ in\ our\ path\r\n
comment15.params=
comment15.target=int\ getNumWallsUsed()
comment15.text=\r\n\ getNumWalls\ -\ how\ many\ walls\ has\ player\ used\r\n
comment16.params=index
comment16.target=Coord\ getWall(int)
comment16.text=\r\n\ getWalls\ -\ returns\ the\ ith\ wall\r\n
comment17.params=
comment17.target=boolean\ hasWall()
comment17.text=\r\n\ hasWall\ -\ does\ player\ have\ walls\ left\r\n
comment18.params=row\ col\ orient
comment18.target=boolean\ isWall(int,\ int,\ int)
comment18.text=\r\n\ isWall\ -\ check\ to\ see\ if\ there's\ a\ wall\ in\ place\ alread\r\n
comment19.params=row\ col\ orient
comment19.target=boolean\ placeWall(int,\ int,\ int)
comment19.text=\r\n\ placeWall\ -\ places\ a\ wall\r\n
comment2.params=
comment2.target=int\ getCurRow()
comment2.text=\r\n\ getCurRow\ -\ get\ current\ row.\r\n
comment20.params=
comment20.target=boolean\ hasWon()
comment20.text=\r\n\ hasWon\ -\ check\ to\ see\ if\ player\ has\ won.\r\n
comment21.params=opponent
comment21.target=java.lang.String\ getShortestPath(Player)
comment21.text=\r\n\ getShortestPath\ -\ returns\ shortest\ path\ to\ user\r\n
comment22.params=index\ row\ col\ opponent
comment22.target=boolean\ shortestPath(int,\ int,\ int,\ Player)
comment23.params=index\ row\ col\ opponent
comment23.target=void\ addChildren(int,\ int,\ int,\ Player)
comment23.text=\r\n\ addChildren\ -\ add\ children\ to\ our\ search\ list\r\n
comment24.params=index\ row\ col
comment24.target=void\ addNode(int,\ int,\ int)
comment24.text=\r\n\ addNode\ -\ add\ a\ child\ node\r\n
comment25.params=index
comment25.target=java.lang.String\ findPath(int)
comment25.text=\r\n\ findPath\ -\ returns\ path\ from\ start\ to\ goal\r\n
comment26.params=i
comment26.target=int\ getQueueRow(int)
comment26.text=\r\n\ getQueueRow\ -\ get\ row\ for\ i'th\ queue\ entry\r\n
comment27.params=i
comment27.target=int\ getQueueCol(int)
comment27.text=\r\n\ getQueueCol\ -\ get\ col\ for\ i'th\ queue\ entry\r\n
comment28.params=i
comment28.target=int\ getQueueIndex(int)
comment28.text=\r\n\ getQueueIndex\ -\ get\ index\ pointing\ to\ previous\ item\ for\ i'th\ queue\ entry\r\n
comment29.params=
comment29.target=int\ getQueueLength()
comment29.text=\r\n\ getSearchLength\ -\ get\ number\ of\ nodes\ in\ search\ queue\r\n
comment3.params=
comment3.target=int\ getCurCol()
comment3.text=\r\n\ getCurCol\ -\ get\ current\ column\r\n
comment30.params=route\ i
comment30.target=int\ getPathRow(java.lang.String,\ int)
comment30.text=\r\n\ getPathRow\ -\ get\ row\ for\ i'th\ step\r\n
comment31.params=route\ i
comment31.target=int\ getPathCol(java.lang.String,\ int)
comment31.text=\r\n\ getPathCol\ -\ get\ col\ for\ i'th\ step\r\n
comment32.params=route
comment32.target=int\ getPathLength(java.lang.String)
comment32.text=\r\n\ getTreeLength\ -\ get\ number\ of\ steps\ in\ route\ path\r\n
comment33.params=route\ row\ col
comment33.target=void\ printPath(java.lang.String,\ int,\ int)
comment33.text=\r\n\ printPath\ -\ prints\ path\ list\ on\ the\ board\r\n
comment4.params=
comment4.target=int\ getGoalRow()
comment4.text=\r\n\ getCurRow\ -\ get\ goal\ row\r\n
comment5.params=
comment5.target=boolean\ isDead()
comment5.text=\r\n\ isDead\ -\ has\ the\ player\ died\r\n
comment6.params=
comment6.target=void\ setDead()
comment6.text=\r\n\ setDead\ -\ the\ player\ has\ just\ died\r\n
comment7.params=
comment7.target=java.lang.String\ getColor()
comment7.text=\r\n\ getColor\ -\ get\ color\r\n
comment8.params=
comment8.target=java.lang.String\ teamName()
comment8.text=\r\n\ teamName\ -\ returns\ the\ team\ name.\ Implement\ as\ return\ with\ string\ (no\ need\ for\ instance\ variable)\r\n
comment9.params=player
comment9.target=Coord\ move(Player)
comment9.text=\r\n\ move\ -\ abstract\ method\ which\ needs\ to\ be\ implemented\ by\ inherited\ class.\r\n
numComments=34
